jobs:
- job: Ubuntu1804
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: |
      mkdir build
      cd build
      cmake ..
      make
      cd ..
      mkdir build_no_throw
      cd build_no_throw
      cmake -D NOEXCEPT_BENCHMARK_THROW_EXCEPTION:BOOL=OFF ..
      make
      cd ..
    displayName: $(Agent.JobName) GCC build
  - script: |
      ./build/noexcept_benchmark
      ./build_no_throw/noexcept_benchmark
    displayName: $(Agent.JobName) results (both including and excluding `throw exception{}`)

- job: Ubuntu2004
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - script: |
      mkdir build
      cd build
      cmake ..
      make
      cd ..
      mkdir build_no_throw
      cd build_no_throw
      cmake -D NOEXCEPT_BENCHMARK_THROW_EXCEPTION:BOOL=OFF ..
      make
      cd ..
    displayName: $(Agent.JobName) GCC build
  - script: |
      ./build/noexcept_benchmark
      ./build_no_throw/noexcept_benchmark
    displayName: $(Agent.JobName) results (both including and excluding `throw exception{}`)

- job: macOS1014
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - script: |
      mkdir build
      cd build
      cmake ..
      make
      cd ..
      mkdir build_no_throw
      cd build_no_throw
      cmake -D NOEXCEPT_BENCHMARK_THROW_EXCEPTION:BOOL=OFF ..
      make
      cd ..
    displayName: $(Agent.JobName) Clang build
  - script: |
      ./build/noexcept_benchmark
      ./build_no_throw/noexcept_benchmark
    displayName: $(Agent.JobName) results (both including and excluding `throw exception{}`)


- job: macOS1015
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - script: |
      mkdir build
      cd build
      cmake ..
      make
      cd ..
      mkdir build_no_throw
      cd build_no_throw
      cmake -D NOEXCEPT_BENCHMARK_THROW_EXCEPTION:BOOL=OFF ..
      make
      cd ..
    displayName: $(Agent.JobName) Clang build
  - script: |
      ./build/noexcept_benchmark
      ./build_no_throw/noexcept_benchmark
    displayName: $(Agent.JobName) results (both including and excluding `throw exception{}`)
